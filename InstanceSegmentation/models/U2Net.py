import torch

import torch.nn as nn

def _upsample_like(src, tar):
    src = nn.functional.interpolate(src, size=tar.shape[2:], mode='bilinear', align_corners=True)
    return src

class REBNCONV(nn.Module):
    def __init__(self, in_channels, out_channels, dirate=1):
        super(REBNCONV, self).__init__()
        self.conv_s1 = nn.Conv2d(in_channels, out_channels, 3, padding=1*dirate, dilation=1*dirate)
        self.bn_s1 = nn.BatchNorm2d(out_channels)
        self.relu_s1 = nn.ReLU(inplace=True)
    def forward(self, x):
        out = self.conv_s1(x)
        out = self.bn_s1(out)
        out = self.relu_s1(out)
        return out

class RSU7(nn.Module):
    def __init__(self, in_channels=3, middle_channels=12, out_channels=1):
        super(RSU7, self).__init__()
        self.rebnconvin = REBNCONV(in_channels, out_channels, dirate=1)
        self.rebnconv1 = REBNCONV(out_channels, middle_channels, dirate=1)
        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv2 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv3 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv4 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool4 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv5 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool5 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv6 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.rebnconv7 = REBNCONV(middle_channels, middle_channels, dirate=2)
        self.rebnconv6d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv5d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv4d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv3d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv2d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv1d = REBNCONV(middle_channels*2, out_channels, dirate=1)
    def forward(self, x):
        out = self.rebnconvin(x)
        out1 = self.rebnconv1(out)
        pool1 = self.pool1(out1)
        out2 = self.rebnconv2(pool1)
        pool2 = self.pool2(out2)
        out3 = self.rebnconv3(pool2)
        pool3 = self.pool3(out3)
        out4 = self.rebnconv4(pool3)
        pool4 = self.pool4(out4)
        out5 = self.rebnconv5(pool4)
        pool5 = self.pool5(out5)
        out6 = self.rebnconv6(pool5)
        out7 = self.rebnconv7(out6)
        out6d = self.rebnconv6d(torch.cat([out7, out6], 1))
        out6dup = _upsample_like(out6d, out5)
        out5d = self.rebnconv5d(torch.cat([out6dup, out5], 1))
        out5dup = _upsample_like(out5d, out4)
        out4d = self.rebnconv4d(torch.cat([out5dup, out4], 1))
        out4dup = _upsample_like(out4d, out3)
        out3d = self.rebnconv3d(torch.cat([out4dup, out3], 1))
        out3dup = _upsample_like(out3d, out2)
        out2d = self.rebnconv2d(torch.cat([out3dup, out2], 1))
        out2dup = _upsample_like(out2d, out1)
        out1d = self.rebnconv1d(torch.cat([out2dup, out1], 1))
        return out1d + out

class RSU6(nn.Module):
    def __init__(self, in_channels=3, middle_channels=12, out_channels=1):
        super(RSU6, self).__init__()
        self.rebnconvin = REBNCONV(in_channels, out_channels, dirate=1)
        self.rebnconv1 = REBNCONV(out_channels, middle_channels, dirate=1)
        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv2 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv3 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv4 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool4 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv5 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.rebnconv6 = REBNCONV(middle_channels, middle_channels, dirate=2)
        self.rebnconv5d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv4d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv3d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv2d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv1d = REBNCONV(middle_channels*2, out_channels, dirate=1)
    def forward(self, x):
        out = self.rebnconvin(x)
        out1 = self.rebnconv1(out)
        pool1 = self.pool1(out1)
        out2 = self.rebnconv2(pool1)
        pool2 = self.pool2(out2)
        out3 = self.rebnconv3(pool2)
        pool3 = self.pool3(out3)
        out4 = self.rebnconv4(pool3)
        pool4 = self.pool4(out4)
        out5 = self.rebnconv5(pool4)
        out6 = self.rebnconv6(out5)
        out5d = self.rebnconv5d(torch.cat([out6, out5], 1))
        out5dup = _upsample_like(out5d, out4)
        out4d = self.rebnconv4d(torch.cat([out5dup, out4], 1))
        out4dup = _upsample_like(out4d, out3)
        out3d = self.rebnconv3d(torch.cat([out4dup, out3], 1))
        out3dup = _upsample_like(out3d, out2)
        out2d = self.rebnconv2d(torch.cat([out3dup, out2], 1))
        out2dup = _upsample_like(out2d, out1)
        out1d = self.rebnconv1d(torch.cat([out2dup, out1], 1))
        return out1d + out

class RSU5(nn.Module):
    def __init__(self, in_channels=3, middle_channels=12, out_channels=1):
        super(RSU5, self).__init__()
        self.rebnconvin = REBNCONV(in_channels, out_channels, dirate=1)
        self.rebnconv1 = REBNCONV(out_channels, middle_channels, dirate=1)
        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv2 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv3 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv4 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool4 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv5 = REBNCONV(middle_channels, middle_channels, dirate=2)
        self.rebnconv4d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv3d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv2d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv1d = REBNCONV(middle_channels*2, out_channels, dirate=1)
    def forward(self, x):
        out = self.rebnconvin(x)
        out1 = self.rebnconv1(out)
        pool1 = self.pool1(out1)
        out2 = self.rebnconv2(pool1)
        pool2 = self.pool2(out2)
        out3 = self.rebnconv3(pool2)
        pool3 = self.pool3(out3)
        out4 = self.rebnconv4(pool3)
        out5 = self.rebnconv5(out4)
        out4d = self.rebnconv4d(torch.cat([out5, out4], 1))
        out4dup = _upsample_like(out4d, out3)
        out3d = self.rebnconv3d(torch.cat([out4dup, out3], 1))
        out3dup = _upsample_like(out3d, out2)
        out2d = self.rebnconv2d(torch.cat([out3dup, out2], 1))
        out2dup = _upsample_like(out2d, out1)
        out1d = self.rebnconv1d(torch.cat([out2dup, out1], 1))
        return out1d + out

class RSU4(nn.Module):
    def __init__(self, in_channels=3, middle_channels=12, out_channels=1):
        super(RSU4, self).__init__()
        self.rebnconvin = REBNCONV(in_channels, out_channels, dirate=1)
        self.rebnconv1 = REBNCONV(out_channels, middle_channels, dirate=1)
        self.pool1 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv2 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool2 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv3 = REBNCONV(middle_channels, middle_channels, dirate=1)
        self.pool3 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.rebnconv4 = REBNCONV(middle_channels, middle_channels, dirate=2)
        self.rebnconv3d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv2d = REBNCONV(middle_channels*2, middle_channels, dirate=1)
        self.rebnconv1d = REBNCONV(middle_channels*2, out_channels, dirate=1)
    def forward(self, x):
        out = self.rebnconvin(x)
        out1 = self.rebnconv1(out)
        pool1 = self.pool1(out1)
        out2 = self.rebnconv2(pool1)
        pool2 = self.pool2(out2)
        out3 = self.rebnconv3(pool2)
        out4 = self.rebnconv4(out3)
        out3d = self.rebnconv3d(torch.cat([out4, out3], 1))
        out3dup = _upsample_like(out3d, out2)
        out2d = self.rebnconv2d(torch.cat([out3dup, out2], 1))
        out2dup = _upsample_like(out2d, out1)
        out1d = self.rebnconv1d(torch.cat([out2dup, out1], 1))
        return out1d + out

class RSU4F(nn.Module):
    def __init__(self, in_channels=3, middle_channels=12, out_channels=1):
        super(RSU4F, self).__init__()
        self.rebnconvin = REBNCONV(in_channels, out_channels, dirate=1)
        self.rebnconv1 = REBNCONV(out_channels, middle_channels, dirate=1)
        self.rebnconv2 = REBNCONV(middle_channels, middle_channels, dirate=2)
        self.rebnconv3 = REBNCONV(middle_channels, middle_channels, dirate=4)
        self.rebnconv4 = REBNCONV(middle_channels, middle_channels, dirate=8)
        self.rebnconv3d = REBNCONV(middle_channels*2, middle_channels, dirate=4)
        self.rebnconv2d = REBNCONV(middle_channels*2, middle_channels, dirate=2)
        self.rebnconv1d = REBNCONV(middle_channels*2, out_channels, dirate=1)
    def forward(self, x):
        out = self.rebnconvin(x)
        out1 = self.rebnconv1(out)
        out2 = self.rebnconv2(out1)
        out3 = self.rebnconv3(out2)
        out4 = self.rebnconv4(out3)
        out3d = self.rebnconv3d(torch.cat([out4, out3], 1))
        out2d = self.rebnconv2d(torch.cat([out3d, out2], 1))
        out1d = self.rebnconv1d(torch.cat([out2d, out1], 1))
        return out1d + out

class U2Net(nn.Module):
    def __init__(self, in_channels=3, num_classes=1, deep_supervision=True):
        super(U2Net, self).__init__()
        self.deep_supervision = deep_supervision
        self.stage1 = RSU7(in_channels, 32, 64)
        self.pool12 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.stage2 = RSU6(64, 32, 128)
        self.pool23 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.stage3 = RSU5(128, 64, 256)
        self.pool34 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.stage4 = RSU4(256, 128, 512)
        self.pool45 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.stage5 = RSU4F(512, 256, 512)
        self.pool56 = nn.MaxPool2d(2, stride=2, ceil_mode=True)
        self.stage6 = RSU4F(512, 256, 512)
        self.stage5d = RSU4F(1024, 256, 512)
        self.stage4d = RSU4(1024, 128, 256)
        self.stage3d = RSU5(512, 64, 128)
        self.stage2d = RSU6(256, 32, 64)
        self.stage1d = RSU7(128, 16, 64)
        self.conv6 = nn.Conv2d(512, num_classes, 3, padding=1)
        self.conv5 = nn.Conv2d(512, num_classes, 3, padding=1)
        self.conv4 = nn.Conv2d(256, num_classes, 3, padding=1)
        self.conv3 = nn.Conv2d(128, num_classes, 3, padding=1)
        self.conv2 = nn.Conv2d(64, num_classes, 3, padding=1)
        self.conv1 = nn.Conv2d(64, num_classes, 3, padding=1)
        self.conv0 = nn.Conv2d(num_classes*6, num_classes, 1)

    def forward(self, x):
        out1 = self.stage1(x)
        pool1 = self.pool12(out1)
        out2 = self.stage2(pool1)
        pool2 = self.pool23(out2)
        out3 = self.stage3(pool2)
        pool3 = self.pool34(out3)
        out4 = self.stage4(pool3)
        pool4 = self.pool45(out4)
        out5 = self.stage5(pool4)
        pool5 = self.pool56(out5)
        out6 = self.stage6(pool5)
        out6up = _upsample_like(out6, out5)
        out5d = self.stage5d(torch.cat([out6up, out5], 1))
        out5dup = _upsample_like(out5d, out4)
        out4d = self.stage4d(torch.cat([out5dup, out4], 1))
        out4dup = _upsample_like(out4d, out3)
        out3d = self.stage3d(torch.cat([out4dup, out3], 1))
        out3dup = _upsample_like(out3d, out2)
        out2d = self.stage2d(torch.cat([out3dup, out2], 1))
        out2dup = _upsample_like(out2d, out1)
        out1d = self.stage1d(torch.cat([out2dup, out1], 1))
        
        if self.deep_supervision:
            sup6 = _upsample_like(self.conv6(out6), out1d)
            sup5 = _upsample_like(self.conv5(out5d), out1d)
            sup4 = _upsample_like(self.conv4(out4d), out1d)
            sup3 = _upsample_like(self.conv3(out3d), out1d)
            sup2 = _upsample_like(self.conv2(out2d), out1d)
            sup1 = self.conv1(out1d)
            sup0 = self.conv0(torch.cat([sup1, sup2, sup3, sup4, sup5, sup6], 1))
            return [sup1, sup2, sup3, sup4, sup5, sup6, sup0]
        else:
            return self.conv1(out1d)